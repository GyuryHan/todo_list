{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","type","placeholder","name","onChange","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","key","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPA6CeA,MA3Cf,SAAkBC,GAAQ,IAAD,EACGC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAD5C,mBAChBC,EADgB,KACTC,EADS,KAGjBC,EAAWC,iBAAO,MAExBC,qBAAU,WACRF,EAASG,QAAQC,WAGnB,IAAMC,EAAe,SAAAC,GACnBP,EAASO,EAAEC,OAAOV,QAGdW,EAAe,SAAAF,GACnBA,EAAEG,iBAEFf,EAAMgB,SAAS,CACbC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAERC,EAAS,KAGX,OAEE,0BAAMW,SAAUF,EAAcQ,UAAU,aACrCtB,EAAME,KACL,oCACA,2BAAOqB,KAAK,OAAOC,YAAY,mBAAmBrB,MAAOC,EAAOqB,KAAK,OAAOH,UAAU,kBACpFI,SAAUf,EAAcgB,IAAKrB,IAC/B,4BAAQgB,UAAU,oBAAlB,WAGA,oCACA,2BAAOC,KAAK,OAAOC,YAAY,aAAarB,MAAOC,EAAOqB,KAAK,OAAOH,UAAU,aAChFI,SAAUf,EAAcgB,IAAKrB,IAC7B,4BAASsB,QAASd,EAAcQ,UAAU,eAA1C,e,cCOOO,EAxCF,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,aAAcC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAAiB,EACxChC,mBAAS,CAC/BgB,GAAI,KACJd,MAAO,KAHuD,mBACzDD,EADyD,KACnDgC,EADmD,KAchE,OAAIhC,EAAKe,GACA,kBAAC,EAAD,CAAUf,KAAMA,EAAMc,SATV,SAAAb,GACnB8B,EAAW/B,EAAKe,GAAId,GACpB+B,EAAQ,CACNjB,GAAI,KACJd,MAAO,QAQJ2B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACf,yBACEf,UAAWc,EAAKE,WAAa,oBAAsB,WACnDC,IAAKF,GAEL,yBAAKE,IAAKH,EAAKnB,GAAIW,QAAS,kBAAMG,EAAaK,EAAKnB,MACjDmB,EAAKf,MAER,yBAAKC,UAAU,SACb,kBAAC,IAAD,CACEM,QAAS,kBAAMI,EAAWI,EAAKnB,KAC/BK,UAAU,gBAEZ,kBAAC,IAAD,CACEM,QAAS,kBAAMM,EAAQ,CAAEjB,GAAImB,EAAKnB,GAAId,MAAOiC,EAAKf,QAClDC,UAAU,oBCaLkB,MA/Cf,WAAqB,IAAD,EACQvC,mBAAS,IADjB,mBACX6B,EADW,KACJW,EADI,KAsClB,OACE,oCACE,0DACE,kBAAC,EAAD,CAAUzB,SAtCA,SAAAoB,GACd,GAAIA,EAAKf,OAAQ,QAAQqB,KAAKN,EAAKf,MAAnC,CAIA,IAAMsB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OAgCL,kBAAC,EAAD,CAAMb,MAAOA,EAAOC,aAdL,SAAAd,GACnB,IAAI2B,EAAed,EAAMK,KAAI,SAAAC,GAI3B,OAHIA,EAAKnB,KAAOA,IACdmB,EAAKE,YAAcF,EAAKE,YAEnBF,KAETK,EAASG,IAO2CZ,WApBnC,SAAAf,GACjB,IAAM4B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKnB,KAAOA,KAExDwB,EAASI,IAiBmEZ,WA7B3D,SAACc,EAAQC,GACtBA,EAAS3B,OAAQ,QAAQqB,KAAKM,EAAS3B,OAI3CoB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAKjC,KAAO8B,EAASC,EAAWE,aCVxDC,MARf,WACE,OACE,yBAAK7B,UAAU,YACX,kBAAC,EAAD,QCHR8B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.74a7588b.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef } from 'react';\r\n\r\nfunction TodoForm(props) {\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n  \r\n  const inputRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus()\r\n  });\r\n\r\n  const handleChange = e => {\r\n    setInput(e.target.value);\r\n  };\r\n  \r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    \r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 1000),\r\n      text: input\r\n    });\r\n    setInput('');\r\n  };\r\n\r\n  return (\r\n    // update 버튼과 Add 버튼 분리\r\n    <form onSubmit={handleSubmit} className=\"todo-form\">\r\n      {props.edit ? ( \r\n        <>\r\n        <input type=\"text\" placeholder=\"Update your item\" value={input} name=\"text\" className=\"todo-input edit\" \r\n          onChange={handleChange} ref={inputRef} />\r\n        <button className=\"todo-button edit\">Update</button>\r\n        </>\r\n        ) : ( \r\n        <>\r\n        <input type=\"text\" placeholder=\"Add a todo\" value={input} name=\"text\" className=\"todo-input\" \r\n        onChange={handleChange} ref={inputRef} />\r\n        <button  onClick={handleSubmit} className=\"todo-button\">Add todo</button>\r\n        </>\r\n      )}  \r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n\r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: ''\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n      <div className='icons'>\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n        />\r\n        <TiEdit\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className='edit-icon'\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Todo;","import React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  const addTodo = todo => {\r\n    if(!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n\r\n    const newTodos = [todo, ...todos];\r\n\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const updateTodo = (todoId, newValue) => {\r\n    if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\r\n    );\r\n  }\r\n\r\n  const removeTodo = id => {\r\n    const removeArr = [...todos].filter(todo => todo.id !== id)\r\n\r\n    setTodos(removeArr)\r\n  }\r\n\r\n  const completeTodo = id => {\r\n    let updatedTodos = todos.map(todo => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>What's the plan for Today?</h1>\r\n        <TodoForm onSubmit={addTodo} />    \r\n        <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n        <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}